let rec sum = function
| [] -> 0
| x::xs -> x + sum xs

P(l1, l2): sum (l1 @ l2) = sum l1 + sum l2

P(l1): \forall l2: sum (l1 @ l2) = sum l1 + sum l2

Take a shortcut, just say, "doing induction over l1"

P(l1, l2): sum (l1 @ l2) = sum l1 + sum l2

Induction is over l1.

Base case:
P([], l2): sum ([] @ l2) = sum [] + sum l2

  sum ([] @ l2) 
= sum l2
  by understanding of @
= 0 + sum l2
  by arithmetic
= sum [] + sum l2
  by def of sum

Inductive case:
P(x::xs, l2): sum (x::xs @ l2) = sum (x::xs) + sum l2

show:  sum (x::xs @ l2) = sum (x::xs) + sum l2
given: sum (xs @ l2) = sum xs + sum l2

  sum ( (x::xs) @ l2) 
= sum ( x :: (xs @ l2) )
  by understanding of lists and @
= x + sum (xs @ l2)
  by def. of sum
= x + (sum xs + sum l2)
  induction
= (x + sum xs) + sum l2
  by arithmetic
= sum (x::xs) + sum l2
  by def of sum




let rec reverse = function
 | [] -> []
 | x::xs -> reverse xs @ [x]

P(l1, l2): reverse (l1 @ l2) = reverse l2 @ reverse l1

Induction is over l1.



Base case
P([], l2): reverse ([] @ l2) = reverse l2 @ reverse []

  reverse ([] @ l2) 
= reverse l2
  by def of @
= (reverse l2) @ []
  by def @
= reverse l2 @ reverse []
  by def of reverse


Inductive case
P(x::xs, l2): reverse (x::xs @ l2) = reverse l2 @ reverse x::xs

show: reverse (x::xs @ l2) = reverse l2 @ reverse x::xs
givev: reverse (xs @ l2) = reverse l2 @ reverse xs

  reverse (x::xs @ l2) 
= reverse (x :: (xs @ l2))   
  by @ and lists, cons
= reverse  (xs @ l2) @ [x]
  by def. of reverse
= (reverse l2 @ reverse xs) @ [x]
  by induction
= reverse l2 @ (reverse xs @ [x])
  by def of @
= reverse l2 @ reverse (x::xs)
  by def. of reverse
















let rec euclid m n =
  if m = n then m
  else
    if m < n
    then euclid m (n-m)
    else euclid (m-n) n

gcd m n = gcd m (nâˆ’m) if n>m 
gcd m n = gcd (mâˆ’n) n if m>n
gcd m n = m           if m=n
