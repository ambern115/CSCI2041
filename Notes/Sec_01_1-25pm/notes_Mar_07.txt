Exercise #2:
Using call-by-value evaluation and then lazy evaluation,
write out the first 10 steps of the evaluation of the 
following: 

take 2 (makefrom 4 5)

Use the following definitions (clearly not OCaml syntax):

   take n [] = []
   take 0 (x::xs) = []
   take n (x::xs) = x::take (n-1) xs

   makefrom 0 v = []
   makefrom n v = v :: makefrom (n-1) (v+1)


-- call by value 
  take 2 (makefrom 4 5)
= take 2 (5 :: (makefrom (4-1) (5+1)))
= take 2 (5 :: (makefrom 3 (5+1)))
= take 2 (5 :: (makefrom 3 6))
= take 2 (5 :: (6 :: (makefrom (3-1) (6+1))))
  .... stuff happens ...
= take 2 (5 :: (6 :: (7 :: 8 ::[])))
= 5 :: (take (2-1) (6 :: 7 :: 8 :: []))
= 5 :: (take 1 (6 :: 7 :: 8 :: []))
= 5 :: (6 :: (take (1-1) (7 :: 8 ::[])))
= 5 :: (6 :: (take 0 (7 :: 8 ::[])))
= 5 :: (6 :: [])


-- call by name
  take 2 (makefrom 4 5)
= take 2 (5 :: (makefrom (4-1) (5+1)))
= 5 :: (take (2-1) (makefrom (4-1) (5+1)))
= 5 :: (take (2-1) (makefrom 3 (5+1)))
= 5 :: (take (2-1) ((5+1) :: (makefrom (3-1) ((5+1)+1))))
= 5 :: (take 1 ((5+1) :: (makefrom (3-1) ((5+1)+1))))
= 5 :: ( (5+1) :: (take (1-1) (makefrom (3-1) ((5+1)+1))))
= 5 :: ( 6 :: (take (1-1) (makefrom (3-1) ((5+1)+1))))
= 5 :: ( 6 :: (take (1-1) (makefrom 2 ((5+1)+1))))
= 5 :: ( 6 :: (take (1-1) ((5+1)+1) :: makefrom (2-1) (((5+1)+1)+1))))
= 5 :: ( 6 :: (take 0 ((5+1+1) :: makefrom (2-1) (((5+1)+1)+1))))
= 5 :: ( 6 :: [])
